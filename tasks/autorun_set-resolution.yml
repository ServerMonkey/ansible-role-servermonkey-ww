---
#info: Set optimal Deskop resolution for VMs
- name: Check if desktop OS
  stat:
    path: /etc/X11/default-display-manager
  register: set_resolution_xorg_is_installed

# Posix VM
- block:
    - name: Set VM resolution on user login, for all users
      blockinfile:
        path: '/etc/xdg/autostart/set-resolution.desktop'
        create: yes
        mode: 0644
        block: |
          [Desktop Entry]
          Type=Application
          Name=set-resolution
          Comment=Set resolution
          Exec=xrandr -s {{ ww_vm_res_x }}x{{ ww_vm_res_y }}

    - name: Try to set VM resolution for current session
      shell: |
        FIRST_DISPLAY=$(ps a | grep Xorg | grep -v grep | head -n1 | awk '{print $6}')
        xhost +local:
        xrandr -s {{ ww_vm_res_x }}x{{ ww_vm_res_y }} -d "$FIRST_DISPLAY"
      failed_when: false

    - name: Set VM display-manager resolution
      shell: |
        DM=$(cat /etc/X11/default-display-manager) 
        if echo "$DM" | grep -qF lightdm; then
            sed -i "/#display-setup-script=/c\display-setup-script=xrandr -s {{ ww_vm_res_x }}x{{ ww_vm_res_y }}" /etc/lightdm/lightdm.conf
        else
            echo "Failed to identify display-manager: $DM"
            echo "Please update this script"
            exit 1
        fi
  become: true
  when:
    - set_resolution_xorg_is_installed.stat.exists
    - ansible_virtualization_role == 'guest'

# Windows VM
- block:
    - name: Get primary video device (Windows)
      shell: regtool list "\HKCC\System\CurrentControlSet\Control\VIDEO"
      register: win_video_device
      changed_when: false

    - name: Set VM resolution (Windows)
      shell: |
        if [ -n "$(systeminfo | grep -F QEMU)" ]; then
            regtool set "\HKCC\System\CurrentControlSet\Control\VIDEO\{{ win_video_device.stdout }}\0000\DefaultSettings.XResolution" {{ ww_vm_res_x }}
            regtool set "\HKCC\System\CurrentControlSet\Control\VIDEO\{{ win_video_device.stdout }}\0000\DefaultSettings.YResolution" {{ ww_vm_res_y }}
        else
            echo "Skip set resolution, is a VM"
        fi
      register: win_set_resolution_result
      changed_when: '"Skip set resolution, is a VM" not in win_set_resolution_result.stdout'

    - debug:
        msg: "{{ win_set_resolution_result.stdout }}"
      when: win_set_resolution_result.stdout != ""
  become: true
  when: '"CYGWIN" in ansible_os_family'