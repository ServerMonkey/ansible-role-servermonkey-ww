---
#info: Basic network configuration, set DNS

# This configuration has the following assumptions:
# - all cabled network interfaces are automatically configured with DHCP
# - if there is no WI-FI card, only /etc/network/interfaces is used
# - if there is a WI-FI card, NetworkManager is used

- block:
    #    - name: Remove NetworkManager profiles
    #      shell: rm -rf /etc/NetworkManager/system-connections/*

    - name: Detect if WIFI is available
      shell: iw dev | grep Interface | awk '{print $2}'
      register: shell_cfg_network_has_wifi
      failed_when: shell_cfg_network_has_wifi.rc != 0
      changed_when: false

    # buggy KALI settings?
    - name: Disable NetworkManager permanently if no WIFI card is available
      service:
        name: NetworkManager
        state: stopped
        enabled: false
      register: service_cfg_network_networkmanager
      when:
        - ansible_distribution == "Kali"
        - shell_cfg_network_has_wifi.stdout == ""

    - name: Activate DHCP on all cabled network devices
      shell: |
        NIC_DATA=$(ip -br a | grep ^e) || exit 1
        NICS=$(echo "$NIC_DATA" | awk '{print $1}') || exit 1
        for i in $NICS; do
            STATE=$(echo "$NIC_DATA" | grep "^$i" | awk '{print $2}')
            IP=$(echo "$NIC_DATA" | grep "^$i" | awk '{print $3}')
            if [ "$STATE" != "UP" ]; then
                echo "Interface '$i' state is not UP, running dhclient"
                dhclient 2>&1
                exit
            elif [ "$IP" = "" ]; then
                echo "No IP assigned to '$i', running dhclient"
                dhclient 2>&1
                exit
            else
                SKIP=true
            fi
        done
        if [ "$SKIP" = true ]; then 
            echo "No need"
        fi
      register: shell_cfg_network_dhcp
      changed_when: "shell_cfg_network_dhcp.stdout != 'No need'"

    - name: Show dhclient output
      debug:
        msg: "{{ shell_cfg_network_dhcp.stdout }}"
      when: shell_cfg_network_dhcp.stdout != 'No need'

    - name: Autoenable DHCP on all cabled network devices
      blockinfile:
        path: /etc/network/interfaces
        marker: '# {mark} - ETHERNET'
        block: |
          # Auto configure all
          auto /e*=eth
          allow-hotplug eth
          iface eth inet dhcp
      when: >
        ("shell_cfg_network_dhcp.stdout != 'No need'" and
        shell_cfg_network_has_wifi.stdout == "") or
        service_cfg_network_networkmanager.changed

    # this assumes that a computer with WI-FI is suppoused to be managed by the
    # user and not the admin. Also assumes that computers with only cabled
    # networks are only managed by the admin.
    - name: Use Network Manager on all network devices (because there is WIFI)
      blockinfile:
        path: /etc/network/interfaces
        marker: '# {mark} - ETHERNET'
        block: |
          # Don't change this, NetworkManager is used because there is WIFI
      when:
        - "shell_cfg_network_dhcp.stdout == 'No need'"
        - shell_cfg_network_has_wifi.stdout != ""

    #    - name: Let the current user manage the network (because there is WIFI)
    #      user:
    #        name: '{{ current_user }}'
    #        group: netdev
    #      when: shell_cfg_network_has_wifi.stdout != ""

    - name: Set primary DNS servers
      lineinfile:
        path: /etc/dhcp/dhclient.conf
        regexp: 'prepend domain-name-servers'
        line: prepend domain-name-servers {{ im_dns }};
      register: lineinfile_cfg_network_dhcp_dns
      when: im_dns is defined

    - name: Renew DHCP for DNS and NetworkManager changes to take effect
      shell: dhclient 2>&1
      register: shell_cfg_network_dhcp_again
      when: >
        service_cfg_network_networkmanager.changed or
        im_dns is defined

    - name: Show dhclient output
      debug:
        msg: "{{ shell_cfg_network_dhcp_again.stdout }}"
      when: >
        service_cfg_network_networkmanager.changed or
        im_dns is defined

    - name: Verify DHCP on all network devices
      shell: |
        NIC_DATA=$(ip -br a | grep -wv ^lo) || exit 1
        NICS=$(echo "$NIC_DATA" | awk '{print $1}') || exit 1
        for i in $NICS; do
            STATE=$(echo "$NIC_DATA" | grep "^$i" | awk '{print $2}')
            IP=$(echo "$NIC_DATA" | grep "^$i" | awk '{print $3}')
            if [ "$STATE" != "UP" ]; then
                echo "Interface '$i' state is not UP"
                exit 1
            elif [ "$IP" = "" ]; then
                echo "No IP assigned to '$i'"
                exit 1
            fi
        done
      changed_when: false

  when: ansible_os_family == "Debian"

#- block:
#    - name: Renew Windows DNS cache
#      shell: ipconfig /flushdns || exit 1
#
#    - name: Renew Windows cache name table
#      shell: nbtstat -R || exit 1
#  when: '"CYGWIN" in ansible_os_family'

#todo: if needed, implement this: https://www.tp-link.com/us/support/fa